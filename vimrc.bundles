if &compatible
    set nocompatible
end

" Shim command and function to allow migration from Vundle to vim-plug. {{{
function! VundleToPlug(vundle_command, arg, ...)
    echom "You are using Vundle's `".a:vundle_command."` command to declare plugins. Dotfiles now uses vim-plug for plugin management. Please rename uses of `".a:vundle_command."` to `Plug`. Plugin was '".a:arg."'."
    let vim_plug_options = {}

    if a:0 > 0
        if has_key(a:1, 'name')
            let name = a:1.name
            let vim_plug_options.dir = "$HOME/.vim/bundle/".a:1.name
        endif

        if has_key(a:1, 'rtp')
            let vim_plug_options.rtp = a:1.rtp
        endif
    endif

    Plug a:arg, vim_plug_options
endfunction

com! -nargs=+ -bar Plugin call VundleToPlug("Plugin", <args>)
com! -nargs=+ -bar Bundle call VundleToPlug("Bundle", <args>)

" }}}

call plug#begin()

" Tpopes' :) {{{
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
" }}}

" Git {{{
Plug 'mhinz/vim-signify'
    let g:signify_vcs_list = ['git']
    omap ic <plug>(signify-motion-inner-pending)
    xmap ic <plug>(signify-motion-inner-visual)
    omap ac <plug>(signify-motion-outer-pending)
    xmap ac <plug>(signify-motion-outer-visual)
    nnoremap <leader>gt :SignifyToggle<CR>
    nnoremap <leader>gh :SignifyToggleHighlight<CR>
    " nnoremap <leader>gr :SignifyRefresh<CR>
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'junegunn/gv.vim'
" Plug 'gregsexton/gitv', { 'on': 'Gitv' }
    " nnoremap <leader>gv :GV<CR>
    " nnoremap <leader>g4 :GV!<CR>
    " nnoremap <leader>gc :Gcommit -v<CR>
    " nnoremap <Leader>gs :Gstatus<CR>
    " nnoremap <Leader>gp :Git push<CR>
    nnoremap <Leader>gw :Gwrite<CR>
    nnoremap <Leader>gd :Gdiff<CR>
    nnoremap <Leader>gb :Gblame<CR>
    nnoremap <Leader>gl :exe ':!cd ' . expand('%:p:h') . '; git log'<CR>
    nnoremap <Leader>gr :Gread<CR>
    nnoremap <Leader>g- :Silent Git stash<CR>:e<CR>
    nnoremap <Leader>g+ :Silent Git stash pop<CR>:e<CR>
" }}}

" kana/vim-textobj-user {{{
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-help'
Plug 'kana/vim-textobj-line'                 " al | il
Plug 'kana/vim-textobj-syntax'               " ay | iy
Plug 'kana/vim-textobj-indent'               " ai | ii
Plug 'kana/vim-textobj-datetime'             " ada| ida
Plug 'kana/vim-textobj-lastpat'              " a/ | i/
Plug 'Julian/vim-textobj-brace'              " aj | ij
Plug 'vimtaku/vim-textobj-keyvalue'          " ak | iv
Plug 'sgur/vim-textobj-parameter'            " a, | i,
Plug 'paulhybryant/vim-textobj-path'         " aP | iP
Plug 'beloglazov/vim-textobj-quotes'         " aq | iq
Plug 'saihoooooooo/vim-textobj-space'        " aS | iS
" Plug 'jceb/vim-textobj-uri'                  " au | iu
Plug 'whatyouhide/vim-textobj-xmlattr'       " ax | ix
Plug 'nelstrom/vim-textobj-rubyblock'        " ar | ir
Plug 'bootleq/vim-textobj-rubysymbol'        " a: | i:
Plug 'whatyouhide/vim-textobj-erb'           " aE | iE
Plug 'osyo-manga/vim-textobj-multiblock'     " ab | ib
" Plug 'idbrii/textobj-word-column.vim'        " ac | ic
" plug 'kana/vim-textobj-entire'               " ae | ie
" plug 'bps/vim-textobj-python'                " af | if, ac | ic
" plug 'akiyan/vim-textobj-php'                " ap | ip
" plug 'julian/vim-textobj-variable-segment'   " av | iv
" }}}

" Tools, Such as nerdtree, vimwiki {{{
Plug 'rhlobo/vim-super-retab'
Plug 'editorconfig/editorconfig-vim'
Plug 'zhuochun/vim-dicts'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'christoomey/vim-sort-motion'
" Plug 'vimwiki/vimwiki'
    " let defualt_wiki = {
        " \'path': '~/github/vimwiki/_source/',
        " \'path_html': '~/github/vimwiki/html/',
        " \'template_path': '~/github/vimwiki/templates/',
        " \'template_ext': '.tpl',
        " \'template_default': 'default',
        " \'nested_syntaxes': {'php': 'php', 'python': 'python', 'c++': 'cpp', 'js': 'javascript', 'bash': 'bash'},
        " \'index': 'index',
        " \'ext': '.wiki',
        " \'syntax': 'default',
        " \'auto_export': 1
    " \}
    " let g:vimwiki_use_calendar = 1
    " let g:vimwiki_use_mouse = 1
    " let g:vimwiki_list = [defualt_wiki]

Plug 'rizzatti/dash.vim'
    :nmap <silent> <leader>d <Plug>DashSearch
    " noremap <c-g> :call investigate#Investigate()<CR>
    " let g:investigate_use_dash=1

Plug 'vim-scripts/TwitVim'
    let g:twitvim_browser_cmd='open'
    let g:twitvim_force_ssl=1
    nnoremap <silent> <leader>tt :FriendsTwitter<cr>
    nnoremap <silent> <leader>tp :PosttoTwitter<cr>
    vnoremap <silent> <leader>tp <Plug>TwitvimVisual<cr>
    nnoremap <silent> <leader>tcp :CPosttoTwitter<cr>
    nnoremap <silent> <leader>tu :UserTwitter<cr>
    nnoremap <silent> <leader>tm :MentionsTwitter<cr>
    nnoremap <silent> <leader>td :DMTwitter<cr>
    nnoremap <silent> <leader>tn :NextTwitter<cr>
    " nnoremap <silent> <leader>tl :PreviousTwitter<cr>

Plug 'vim-scripts/matchit.zip'
Plug 'godlygeek/tabular'
Plug 'liangfeng/vimcdoc'
Plug 'uguu-org/vim-matrix-screensaver'
" }}}

" Browse, Jump, motion {{{
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
    nnoremap <silent> <leader>1 :NERDTreeToggle<CR>
    nnoremap <silent> <leader>nf :NERDTreeFind<CR>
    let g:NERDTreeMapPreview = "p"
    let g:NERDTreeMapOpenSplit = "s"
    let g:NERDTreeMapPreviewSplit = "<c-s>"
    let g:NERDTreeMapOpenVSplit = "v"
    let g:NERDTreeMapPreviewVSplit = "<c-v>"
    let g:NERDTreeMapToggleHidden = "I"
    let g:NERDTreeIgnore=['\.meta$', '\.pyc$']
    let g:NERDTreeMapJumpNextSibling = '<c-d>'
    let g:NERDTreeMapJumpPrevSibling = '<c-u>'
    " Set opened dir to workspace dir
    let NERDTreeChDirMode = 2
    " let NERDTreeWinPos = 'right'
    let NERDTreeShowBookmarks = 1
    let NERDTreeWinSize = 30
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'scrooloose/nerdcommenter'
    let g:NERDSpaceDelims=1

Plug 'griffinqiu/star-search'
Plug 'dyng/ctrlsf.vim'
    nmap <C-G>g <Plug>CtrlSFPrompt
    nmap <C-G>G <Plug>CtrlSFCwordPath
    nmap <C-G><C-G> <Plug>CtrlSFCwordExec
    vmap <C-G>g <Plug>CtrlSFVwordPath
    vmap <C-G>G <Plug>CtrlSFVwordPath
    vmap <C-G><C-G> <Plug>CtrlSFVwordExec
    nmap <C-G>p <Plug>CtrlSFPwordPath
    nmap <C-G><C-P> <Plug>CtrlSFPwordExec
    nnoremap <C-G><C-O> :CtrlSFOpen<CR>
    " nnoremap <C-G><C-T> :CtrlSFToggle<CR>
    inoremap <C-G><C-T> <Esc>:CtrlSFToggle<CR>
    nmap <C-G>l <Plug>CtrlSFQuickfixPrompt
    vmap <C-G>l <Plug>CtrlSFQuickfixVwordPath
    vmap <C-G>L <Plug>CtrlSFQuickfixVwordPath
    vmap <C-G><C-L> <Plug>CtrlSFQuickfixVwordExec
    nmap <silent><leader>3 :CtrlSFToggle<CR>
    " let g:ctrlsf_toggle_map_key = '<leader>3'
    let g:ctrlsf_mapping = {
        \ "next": "<c-d>",
        \ "prev": "<c-u>",
        \ }
    let g:ctrlsf_auto_close = 0
    let g:ctrlsf_open_left = 0
    let g:ctrlsf_position = 'right'
    let g:ctrlsf_winsize = '30%' 
    "let g:ctrlsf_context = '-B 5 -A 3'
    " let g:ctrlsf_debug_mode = 1
    " let g:ctrlsf_ignore_dir = ['node_modules', 'build', 'tmp']
    nnoremap \ :CtrlSF -filetype ruby<SPACE>

" Plug 'terryma/vim-multiple-cursors'
    " let g:multi_cursor_start_key='<c-n>'
    " let g:multi_cursor_start_word_key='g<c-n>'
    " let g:multi_cursor_quit_key = '<Esc>'

" Plug 'rking/ag.vim'
    " if executable('ag')
        " " Use Ag over Grep
        " set grepprg=ag\ --nogroup\ --nocolor
        " " set grepprg=ag\ --vimgrep
    " endif

Plug 'Lokaltog/vim-easymotion'
    let g:EasyMotion_leader_key = "'"

Plug 'houtsnip/vim-emacscommandline'
" }}}

" CtrlP or FZF {{{
if has('gui_running')
Plug 'ctrlpvim/ctrlp.vim'
    " for ctrlp plugin
    " Define bundles via Github repos
    let g:ctrlp_custom_ignore = {
        \'dir': '\v[\/](\.(git|hg|svn)|env|var|tmp|bower_components|node_modules|semantic|build|vendor)$',
        \'file': '\v\.(exe|so|dll|meta|pyc|as|so|tags)$',
        \'link': 'some_bad_symbolic_links'
    \}
    let g:ctrlp_prompt_mappings = {
        \'AcceptSelection("v")': ['<C-V>', '<RightMouse>'],
        \'AcceptSelection("h")': ['<C-S>', '<C-CR>'],
        \'PrtClearCache()':            ['<F6>'],
        \'PrtCurLeft()': ['<left>', '<c-h>'] 
    \}
    " let g:ctrlp_user_command = 'find %s -type f'
    let g:ctrlp_by_filename = 1
    let g:ctrlp_mruf_case_sensitive = 0
    let g:ctrlp_use_caching = 1
    let g:ctrlp_cache_dir = '~/tmp/ctrlp'
    let g:ctrlp_working_path_mode = 'w'
    let g:ctrlp_tabpage_position = 'f'

    " nnoremap <leader>b :CtrlPBuffer<CR>
    " nnoremap <leader>h :CtrlPMRU<CR>
    " nnoremap <leader>e :CtrlPRegister<CR>
    " nnoremap <leader>m :CtrlPMark<CR>
    " nnoremap <leader>g :CtrlPTag<CR>
    " nnoremap <leader>f :CtrlPFunky<Cr>
    " nnoremap <Leader>u :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

Plug 'majutsushi/tagbar'
    nnoremap <silent> <leader>2 :TagbarToggle<CR>
    let g:tagbar_type_php = {
        \'ctagstype' : 'php',
        \'kinds'         : [
            \'i:interfaces',
            \'c:classes',
            \'d:constant definitions',
            \'f:functions',
            \'j:javascript functions:1'
        \]
    \}"
    let g:tagbar_width=30
    let g:tagbar_sort=0
    let g:tagbar_autofocus=1
    let g:Tb_MaxSize=5

else
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
    " for fzf plugin
    nnoremap <c-p> :Files <cr>

    " function! s:build_quickfix_list(lines)
        " call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
        " copen
        " cc
    " endfunction

    let g:fzf_action = {
        \ 'ctrl-t': 'tab split',
        \ 'ctrl-x': 'split',
        \ 'ctrl-v': 'vsplit' }
    let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all,ctrl-d:deselect-all'

    nnoremap <C-p> :GitFiles<CR>
    nnoremap <leader>fg :GitFiles<CR>
    nnoremap <leader>fgs :GFiles?<CR>
    nnoremap <leader>ff :Files<CR>
    nnoremap <leader>fd :Buffers<CR>
    nnoremap <leader>ft :Tags<CR>
    nnoremap <leader>fbt :Tags<CR>
    nnoremap <leader>fc :Commits<CR>
    nnoremap <leader>fbc :BCommits<CR>
    nnoremap <leader>fl :Lines<CR>
    nnoremap <leader>fbl :BLines<CR>
    nnoremap <leader>fm :Marks<CR>
    nnoremap <leader>fw :Windows<CR>
    nnoremap <leader>fh :History<CR>
    nnoremap <leader>f: :History:<CR>
    nnoremap <leader>f/ :History/<CR>
    nnoremap <leader>f? :Commands<CR>
    nnoremap <leader>fm :Maps<CR>
    " nnoremap <leader>ag :Ag<CR>
    " nnoremap <leader>agt :Agt<CR>
    nnoremap <silent> <Leader>at :let @"=&filetype \| Agt --<C-R>" <C-R><C-W><CR>
    command! -nargs=+ -complete=file Agt call fzf#vim#ag_raw(<q-args>)

    imap <c-x><c-k> <plug>(fzf-complete-word)
    imap <c-x><c-f> <plug>(fzf-complete-file-ag)
    " imap <c-x><c-f> <plug>(fzf-complete-path)
    imap <c-x><c-l> <plug>(fzf-complete-line)

    nmap <leader><tab> <plug>(fzf-maps-n)
    xmap <leader><tab> <plug>(fzf-maps-x)
    omap <leader><tab> <plug>(fzf-maps-o)
endif
" }}}

" Syntax {{{
" Plug 'w0rp/ale'
    " let g:ale_lint_on_save = 1
    " let g:ale_lint_on_text_changed = 0

Plug 'maksimr/vim-jsbeautify', { 'for': 'js' }
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'pangloss/vim-javascript', { 'for': 'js' }
    let g:javascript_enable_domhtmlcss = 1
    let g:javascript_ignore_javaScriptdoc = 1
" Plug 'rstacruz/vim-hyperstyle'

Plug 'othree/html5.vim'
Plug 'griffinqiu/vim-coloresque'
Plug 'othree/csscomplete.vim', { 'for': ['css', 'scss', 'less'] }
Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'scss', 'less'] }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoUpdateBinaries' }

Plug 'Keithbsmiley/rspec.vim', { 'for': 'ruby' }
Plug 'ecomba/vim-ruby-refactoring', { 'for': 'ruby' }
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
" Plug 'tpope/vim-projectionist', { 'for': 'ruby' }
" Plug 'tpope/vim-rake', { 'for': 'ruby' }
Plug 'tpope/vim-bundler', { 'for': 'ruby' }
Plug 'tpope/vim-pathogen', { 'for': 'ruby' }
    " autocmd FileType ruby let &l:tags = pathogen#legacyjoin(pathogen#uniq(
        " \ pathogen#split(&tags) +
        " \ map(split($GEM_PATH,':'),'v:val."/gems/*/tags"')))
Plug 'griffinqiu/vim-i18n'
    vmap <leader>zz :call I18nTranslateString()<CR>
    vmap <leader>zd :call I18nDisplayTranslation()<CR>
Plug 'tpope/vim-rails'
Plug 'AndrewRadev/switch.vim'
    let g:switch_mapping = "-"

Plug 'StanAngeloff/php.vim', { 'for': 'php' }
Plug 'shawncplus/phpcomplete.vim', { 'for': 'php' }
    let g:phpcomplete_mappings = {
        \ 'jump_to_def': ',g',
    \ }

Plug 'hynek/vim-python-pep8-indent', { 'for': 'python' }
Plug 'chase/vim-ansible-yaml'

Plug 'autowitch/hive.vim', { 'for': ['hql', 'sql'] }

Plug 'plasticboy/vim-markdown'
Plug 'mzlogin/vim-markdown-toc'
    let g:vim_markdown_folding_disabled=1
    let g:vim_markdown_initial_foldlevel=1

Plug 'chemzqm/wxapp.vim'
" }}}

" Colorscheme {{{
" Plug 'ap/vim-css-color'
Plug 'yonchu/accelerated-smooth-scroll'
" }}}

" Snips {{{
"
if !has('gui_running')
    Plug 'SirVer/ultisnips'
        let g:UltiSnipsExpandTrigger="<tab>"
        let g:UltiSnipsListSnippets="<c-7>"
        let g:UltiSnipsJumpForwardTrigger="<c-j>"
        let g:UltiSnipsJumpBackwardTrigger="<c-k>"
        let g:UltiSnipsEditSplit="vertical"
        nnoremap <silent> <leader>uu :UltiSnipsEdit<cr>
        nnoremap <silent> <leader>ue :UltiSnipsEdit<space>
    Plug 'griffinqiu/vim-snippets'
endif

Plug 'mattn/emmet-vim'
    " let g:user_emmet_mode='i'
    let g:user_emmet_mode='a'
    autocmd FileType html,css,less,sass,eruby,erb EmmetInstall
    let g:user_emmet_leader_key='<c-e>'
    " let g:user_emmet_expandabbr_key='<C-V><C-V>'
    let g:user_emmet_expandword_key = '<C-e>v'
    let g:user_emmet_update_tag = '<C-e>u'
    let g:user_emmet_next_key='<C-e>n'
    let g:user_emmet_prev_key='<C-e>p'

    let g:user_emmet_settings = {
    \    'html' : {
    \        'quote_char': "'",
    \    },
    \}
    " let g:user_emmet_togglecomment_key = '<C-V>/'
    " let g:user_emmet_install_global=1
" }}}

" Airline {{{
" Plug 'Lokaltog/vim-powerline'
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
    " let g:airline_theme='simple'
    " let g:airline_powerline_fonts=1
    " let g:airline#extensions#branch#enabled = 1
    " let g:airline#extensions#branch#empty_message = ''
    " let g:airline#extensions#syntastic#enabled = 1
    " let g:airline#extensions#default#section_truncate_width = {
        " \ 'b': 79,
        " \ 'x': 60,
        " \ 'y': 88,
        " \ 'z': 45,
        " \ }
    " " disable summary of changed hunks under source control.
    " let g:airline#extensions#hunks#enabled = 0
" Plug 'edkolev/tmuxline.vim'
    " let g:tmuxline_theme = 'icebert'
" }}}

" " Static language Complete {{{
" Plug 'Valloric/YouCompleteMe'
" noremap <c-]> :YcmCompleter GoToDefinitionElseDeclaration<CR>
" set completeopt-=preview
" let g:ycm_key_list_previous_completion=['<Up>']
" let g:ycm_key_list_select_completion=['<Down>']
" let g:ycm_seed_identifiers_with_syntax=1
" let g:ycm_complete_in_comments=1
" let g:ycm_confirm_extra_conf=0
" " let g:ycm_collect_identifiers_from_tags_files=1
" let g:ycm_key_invoke_completion='<C-Space>'
" let g:ycm_auto_trigger=0
" let g:ycm_filetype_blacklist = {
" \ 'tagbar' : 1,
" \ 'qf' : 1,
" \ 'notes' : 1,
" \ 'markdown' : 1,
" \ 'unite' : 1,
" \ 'text' : 1,
" \ 'vimwiki' : 1,
" \ 'pandoc' : 1,
" \ 'infolog' : 1,
" \ 'mail' : 1
" \}
" let g:ycm_semantic_triggers = {
" \ 'c' : ['->', '.'],
" \ 'objc' : ['->', '.'],
" \ 'ocaml' : ['.', '#'],
" \ 'cpp,objcpp' : ['->', '.', '::'],
" \ 'perl' : ['->'],
" \ 'php' : ['->', '::'],
" \ 'cs,java,javascript,d,python,perl6,scala,vb,elixir,go' : ['.'],
" \ 'vim' : ['re![_a-zA-Z]+[_\w]*\.'],
" \ 'ruby' : ['.', '::'],
" \ 'lua' : ['.', ':'],
" \ 'erlang' : [':'],
" \ }

" Plug 'marijnh/tern_for_vim'
" Plug 'OrangeT/vim-csharp'
" Plug 'scrooloose/syntastic'
" " }}}

if filereadable(expand("~/.vimrc.bundles.local"))
    source ~/.vimrc.bundles.local
endif

call plug#end()
